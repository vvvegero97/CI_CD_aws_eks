pipeline {
  agent { label 'Slave' }
  environment {
    AWS_ACCOUNT_ID     = "178112661675"
    AWS_DEFAULT_REGION = "eu-north-1"
    // IMAGE_REPO_NAME    = "vegero-tg-ecr"
    IMAGE_REPO_NAME    = "testrepo"
    IMAGE_TAG          = "latest"
    REPOSITORY_URI     = "\${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com/\${IMAGE_REPO_NAME}"
    CHART_S3           = "s3://vegero-helm-charts/stable/myapp/"
    CHART_REPO         = "stable-myapp"
  }
  stages {
    stage('Delete workspace before build starts') {
        steps{
            echo 'Deleting workspace'
            deleteDir()
        }
    }
    stage('Checkout') {
        steps{
          git branch: 'main', credentialsId: 'GitHub-SSH', url: 'git@github.com:vvvegero97/CI_CD_aws_eks.git'      
        }
    }

    stage('Build docker image and run tests') {
        steps{
            dir('webapp') {
                sh "docker build -t \${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com/\${IMAGE_REPO_NAME}:\${IMAGE_TAG} ."
            }
            sh '''
                ls -la 
                pwd

                helm version

                ## LINES=$(docker images | wc -l | grep \${IMAGE_REPO_NAME}:\${IMAGE_TAG})
                ## echo $LINES

                ## LINES=$(docker images | grep \${IMAGE_REPO_NAME}:\${IMAGE_TAG} | wc -l)
                ## echo $LINES
              '''
        }
    }

    stage('Tag docker image, Push images to ECR and delete Local images') {
        steps{
          sh '''
              docker image tag \${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com/\${IMAGE_REPO_NAME}:\${IMAGE_TAG} \${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com/\${IMAGE_REPO_NAME}:\${BUILD_NUMBER}
              aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin \${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com
              docker push \${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com/\${IMAGE_REPO_NAME}:${IMAGE_TAG}
              docker push \${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com/\${IMAGE_REPO_NAME}:${BUILD_NUMBER}
              echo Build number is \${BUILD_NUMBER}
              docker rmi \${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com/\${IMAGE_REPO_NAME}:\${IMAGE_TAG}
              docker rmi \${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com/\${IMAGE_REPO_NAME}:\${BUILD_NUMBER}
              docker image prune -f
          '''
        }
    }
    stage('Get the latest image from ECR') {
        steps{
          // RELEASE_NAME = "\${BUILD_NUMBER}-app-\${GIT_COMMIT}"
          // NAMESPACE = "\${BUILD_NUMBER}-app-ns"
          dir ('app-chart'){
            sh '''
                ## aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin \${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com
                ## docker pull \${AWS_ACCOUNT_ID}.dkr.ecr.\${AWS_DEFAULT_REGION}.amazonaws.com/\${IMAGE_REPO_NAME}:${IMAGE_TAG}
                sed -i 's!sampleimage!${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}!g' ./values.yaml
                sed -i 's/default/${BUILD_NUMBER}-app-ns/g' ./values.yaml
                cat ./values.yaml
            '''
          }
        }
    }
    stage('Push new Chart to Museum') {
      steps{
        withCredentials([file(credentialsId: 'kubeconfigg', variable: 'KUBECRED')]) {
          sh 'cat $KUBECRED > ~/.kube/config'
          // sh './deploy-app.sh'
          sh '''
              echo "This is deploy script."
              echo "Chart bucket: \${CHART_S3}"
              echo "Contents of bucket: "
              aws s3 ls \${CHART_S3}
              ## helm s3 init s3://vegero-helm-charts/stable/myapp
              ## helm repo update ${CHART_REPO} s3://vegero-helm-charts/stable/myapp
              helm repo list
              VERSION=`cat ./app-chart/Chart.yaml | grep version | awk '{print $3}'`
              echo ./webapp-${VERSION}.tgz
              helm package ./app-chart
              helm s3 push ./app-chart-${VERSION}.tgz ${CHART_REPO} --force
              helm repo update && helm search repo ${CHART_REPO}
          '''
        }
      }

    }
  }
}
